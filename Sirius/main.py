import keyboard_menu
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime
from config_reader import config
from aiogram import F


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)


# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# –î–ª—è –∑–∞–ø–∏—Å–µ–π —Å —Ç–∏–ø–æ–º Secret* –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 
# –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ get_secret_value(), 
# —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–º–µ—Å—Ç–æ '*******'
bot = Bot(token=config.bot_token.get_secret_value())


# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
dp["started_at"] = datetime.now().strftime("%H:%M - %d/%m/%Y")

# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# @dp.message(Command("start"))
# async def cmd_start(F: types.Message):
#     await F.answer("Hello!") 


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(F: types.Message):
    await F.reply("Test 1")



# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
@dp.message(Command("test2"))
async def cmd_test2(F: types.Message):
    await F.reply("Test 2")


@dp.message(Command("answer"))
async def cmd_answer(F: types.Message):
    await F.answer("–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")  


@dp.message(Command("–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"))
async def cmd_dice(F: types.Message):
    await F.answer_dice(emoji="üé≤")


@dp.message(Command("info"))
async def cmd_info(F: types.Message, started_at: str):
    await F.answer(f"–ë–æ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ —Ç—Ä—É–¥–∏—Ç—Å—è –¥–ª—è –≤–∞—Å —Å   {started_at}")

@dp.message(Command("name"))
async def cmd_name(Message: types.Message):
    await Message.answer(f"–ü—Ä–∏–≤–µ—Ç {Message.from_user.full_name}")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")],
        [types.KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫")],
        [types.KeyboardButton(text="–°–∫–æ–ª—å–∫–æ —è –∂–∏–≤—É"), types.KeyboardButton(text="–ö—É–±–∏–∫"), types.KeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:"
    )
    await message.answer("start", reply_markup=keyboard)


@dp.message(F.text.lower() == "–ö—É–±–∏–∫")
async def with_puree(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")

@dp.message(F.text.lower() == "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def selected_menu_main_1(message: types.Message):
    await message.reply("1")

@dp.message(F.text.lower() == "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def selected_menu_main_2(message: types.Message):
    await message.reply("2")

@dp.message(F.text.lower() == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫")
async def selected_menu_main_3(message: types.Message):
    await message.reply("3")

if __name__ == "__main__":
    asyncio.run(main())
    